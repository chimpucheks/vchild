		TOPIC :STREAM & JAVA DATE API
*numeric stream: stream API provide stream to work with numbers

1.Get sum of all employee salariees
double toatal salary = employees.stream().mapToDouble(Employee::get salary).sum();

2.Get minimum salary from all employees
employees.stream().mapToDoube(Employee::getsalary).min()

3.Get maximum salary from the all employee
employees.stream().mapToDouble(Employee::getSalary).max()

4.Get average salary of all employees
employee.stream().mapToDouble(Employee::getSalary).average


example:
import java.util.Objects;

public class Employee {
 private int id;
 private String firstName;
 private String lastName;
 private int age;
 private String city;
 private double salary;

 public Employee(int id, String firstName, String lastName, int age,
   String city, double salary) {
  super();
  this.id = id;
  this.firstName = firstName;
  this.lastName = lastName;
  this.age = age;
  this.city = city;
  this.salary = salary;
 }

 public int getId() {
  return id;
 }

 public void setId(int id) {
  this.id = id;
 }

 public String getFirstName() {
  return firstName;
 }

 public void setFirstName(String firstName) {
  this.firstName = firstName;
 }

 public String getLastName() {
  return lastName;
 }

 public void setLastName(String lastName) {
  this.lastName = lastName;
 }

 public int getAge() {
  return age;
 }

 public void setAge(int age) {
  this.age = age;
 }

 public String getCity() {
  return city;
 }

 public void setCity(String city) {
  this.city = city;
 }

 public double getSalary() {
  return salary;
 }

 public void setSalary(double salary) {
  this.salary = salary;
 }

 @Override
 public boolean equals(Object employee) {
  if (Objects.isNull(employee))
   return false;

  if (!(employee instanceof Employee))
   return false;

  Employee emp = (Employee) employee;

  return id == emp.id;
 }

 @Override
 public int hashCode() {
  return Objects.hash(id, firstName, lastName, age);

 @Override
 public String toString() {
  return String.format("%s(%s,%d,%f)", firstName, city, age, salary);
 }

}




*collectors
*grouping & partioning
*parallel stream :
two types:1.using parallel()method on stream

//java program to illustrate parallel streams
//using parallel()method on a stream
//importing required classes
import java.io.File;
import java.io.IOException;
import java.nio.files.files;
import java.util.stream.stream;


//Main class
//parallelStreamTest
public class GFG{

	//Main driver method
	publlic static  void main(String[] args)throws IOEXception
	


		//creating a file object
		File FileName = new File("M:\\Documents\\Textfilie.txt");



		//creating a stream of string type
		//using the lines()method to
		//read one line at a time from the text file
		stream<String>text =Files.lines(fileName.topath());

		
		//creatiing parallel stream using parallel()method
		//later using forEach() to print on console
		text.parallel().forEach(System.out::println);


		//Closing the stream
		//using close ()method
		text.close();
	}
}


2.using parallel stream () on a collection
//Java program to Illustrate parallel stream
//using  parallelstring()method on a stream


//importing required classes
import java.io.file;
import java.io.IOException;
import java.nio.file.files;
import java.util.*;

//main class
//parallelStreamTest
public class GFG{
       
              //main driver method
		public static void main(String[] args)
				throws IOException
		{
		
		//crreating a file object
		File FileName
			=new File("M:\\Document\\List_Textfile.txt");

		//Reading the line of text file by
		//creating a List using readAllLines()method
		List<String>text
			=Files.readingAllLines(fileName.topath());

			//creating parallel stream by creating a List
			//using readAllLines()method

			text.parallelStream().forEach(system.out::printn);
		}
	}
output:
9
4
22
17
13



*limitations of date API prior to java 8: 

java.time.LOcaldate
java.time.LocalTime
java.time.LocalDateTime
java.time.zonedDateTime
java.time.offsetTime

* date API important class : two package java.time and java.util

1.java.lang.system: it provides the currentTimeMillis()method  that return the currennt time in the milliseconds it show te current
			date and time in milliseconds from january 1st in the yr  1970
2.java.util.date: it is used to show specific instant of time with unit of millisecond
3.java.until.calendar: it is abstract class that provides methods for converting btw 
			instance and manipulating the calendar fields in different ways
4.java.text.simpleDateFormat:it is a class thst is used to format and parse type dates in a predefined manner or user defined pattern
5.java.util.Timezone: it represents a time zone offset,and also figures out daylight savings.


*using local date ,local time,local date time,duration ,period:

import java.time.LocalDate;
public classs LocalDateExample1
 public static void  main(String[] args){
 LocalDate date =LocalDate.now();
 LOcalDate yesterday=date.minuDays(1);
 LocalDate tomorrow =yesterday.plusDays(2;)
 system.out.println("Today date:"+date);
 system.outprintln("yesterday date:"+yesterday);
 system.out.println("Tomorrow date:"+tomorrow);
	}
}

output : yy-mm-dd

*program to demonstrate is leap year()method
import java.time.LocalDate;
public class localDateExample2{
	public static void main(String[] args){
	localDate date1= LocalDate.of(2017,1,13);
	system.out.println(date1.isLeapYear());
	LocalDate date2=LocalDate.of(2016,9,23);
	system.out.println(date2.isLeapYear());
	}
}

LocalDateExample3.java

import java.time.*;  
public class LocalDateExample3 {  
  public static void main(String[] args) {  
    LocalDate date = LocalDate.of(2017, 1, 13);  
    LocalDateTime datetime = date.atTime(1,50,9);      
    System.out.println(datetime);   
  }  
}  
Output:

2017-01-13T01:50:09
Program to demonstrate format() method of LocalDate class


LocalDateExample4.java

import java.time.LocalDate;  
import java.time.format.DateTimeFormatter;  
public class LocalDateExample4  
{  
    public static void main(String ar[])  
    {  
        // Converting LocalDate to String  
        // Example 1  
        LocalDate d1 = LocalDate.now();  
        String d1Str = d1.format(DateTimeFormatter.ISO_DATE);  
        System.out.println("Date1 in string :  " + d1Str);  
        // Example 2  
        LocalDate d2 = LocalDate.of(2002, 05, 01);  
        String d2Str = d2.format(DateTimeFormatter.ISO_DATE);  
        System.out.println("Date2 in string :  " + d2Str);  
        // Example 3  
        LocalDate d3 = LocalDate.of(2016, 11, 01);  
        String d3Str = d3.format(DateTimeFormatter.ISO_DATE);  
        System.out.println("Date3 in string :  " + d3Str);  
    }  
}  
Output:

Date1 in string :  2021-09-13
Date2 in string :  2002-05-01
Date3 in string :  2016-11-01


local time Example now;
 import java.time.LocalTime;
 public class localTimeExample1{
 public static void main(String[] args){
 localTime time = LocalTime.now();
 system.out.println(time);
 }
}


local time example:of()
import java.time.LocalTime{
public class LocalTimeExample2{
public static void main(String[] args){
LocalTime time=LocalTime.of(10,43,12);
system.oout.println(time);


Java LocalTime Example: minusHours() and minusMinutes()
LocalTimeExample3.java

import java.time.LocalTime;  
public class LocalTimeExample3 {  
  public static void main(String[] args) {  
    LocalTime time1 = LocalTime.of(10,43,12);  
    System.out.println(time1);  
    LocalTime time2=time1.minusHours(2);  
    LocalTime time3=time2.minusMinutes(34);  
    System.out.println(time3);  
  }  
}  

Output:
10:43:12
08:09:12

Java LocalTime Example: plusHours() and plusMinutes()
LocalTimeExample4.java

import java.time.LocalTime;  
public class LocalTimeExample4 {  
  public static void main(String[] args) {  
    LocalTime time1 = LocalTime.of(10,43,12);  
    System.out.println(time1);  
    LocalTime time2=time1.plusHours(4);  
    LocalTime time3=time2.plusMinutes(18);  
    System.out.println(time3);  
  }  
}  

Output:
10:43:12
15:01:12
Java LocalTime Example
LocalTimeExample5.java

import java.time.*;  
import java.time.temporal.ChronoUnit;  
public class LocalTimeExample5 {  
  public static void main(String... args) {  
    ZoneId zone1 = ZoneId.of("Asia/Kolkata");  
    ZoneId zone2 = ZoneId.of("Asia/Tokyo");  
    LocalTime time1 = LocalTime.now(zone1);  
    System.out.println("India Time Zone: "+time1);  
    LocalTime time2 = LocalTime.now(zone2);  
    System.out.println("Japan Time Zone: "+time2);  
    long hours = ChronoUnit.HOURS.between(time1, time2);  
    System.out.println("Hours between two Time Zone: "+hours);  
    long minutes = ChronoUnit.MINUTES.between(time1, time2);  
    System.out.println("Minutes between two time zone: "+minutes);  
  }  
}  

Output:
India Time Zone: 14:56:43.087
Japan Time Zone: 18:26:43.103
Hours between two Time Zone: 3
Minutes between two time zone: 210



*example for localDateTime

import java.time.LocalDateTime;
impot java.time.format.DateTimeFormatter;
public class LocalDateTimeExample1{
 public static void main(String[] args){
  localDateTime now =LocalDateTime.now();
  system.out.println("Before Formatting:"+now);
  DateTimeFormatter Format = DateTimeFormatter.ofPattern("dd-MM-yyyy-HH:mm:ss");
  string FormatDateTime =now.format(format);
  system.out.println("After Formatting:"+formatDateTime);

	}
}


*example of LocalDateTime :now()
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter
public class LocalDateTimeExample2
public static void main(string[] args){
 localDateTime datetime1=LocalDateTime.now();
 DateTimeFormatter format=DateTimeFormatter.ofpattern("dd-mm-yyy HH:mm:ss");
  string formatDateTime =datetime1.format(format);
  system.out.println(formatDateTime);
  }
}





*Java LocalDateTime Example: get()
import java.time.LocalDateTime;  
import java.time.temporal.ChronoField;  
public class LocalDateTimeExample3 {  
  public static void main(String[] args) {  
    LocalDateTime a = LocalDateTime.of(2017, 2, 13, 15, 56);    
    System.out.println(a.get(ChronoField.DAY_OF_WEEK));  
    System.out.println(a.get(ChronoField.DAY_OF_YEAR));  
    System.out.println(a.get(ChronoField.DAY_OF_MONTH));  
    System.out.println(a.get(ChronoField.HOUR_OF_DAY));  
    System.out.println(a.get(ChronoField.MINUTE_OF_DAY));   
  }  
}  

Output:
1
44
13
15
956

*Java LocalDateTime Example: minusDays()
import java.time.LocalDateTime;  
import java.time.format.DateTimeFormatter;  
public class LocalDateTimeExample4 {  
public static void main(String[] args) {  
  LocalDateTime datetime1 = LocalDateTime.of(2017, 1, 14, 10, 34);  
  LocalDateTime datetime2 = datetime1.minusDays(100);  
  System.out.println("Before Formatting: " + datetime2);  
  DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");  
  String formatDateTime = datetime2.format(format);   
  System.out.println("After Formatting: " + formatDateTime );  
}  
}  

Output:
Before Formatting: 2016-10-06T10:34
After Formatting: 06-10-2016 10:34

*Java LocalDateTime Example: plusDays()
import java.time.LocalDateTime;  
import java.time.format.DateTimeFormatter;  
public class LocalDateTimeExample5 {  
public static void main(String[] args) {  
  LocalDateTime datetime1 = LocalDateTime.of(2017, 1, 14, 10, 34);  
  LocalDateTime datetime2 = datetime1.plusDays(120);  
  System.out.println("Before Formatting: " + datetime2);  
  DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");  
  String formatDateTime = datetime2.format(format);   
  System.out.println("After Formatting: " + formatDateTime );  
}  
}  

Output:
Before Formatting: 2017-05-14T10:34
After Formatting: 14-05-2017 10:34


*temporal adjuster:


@Test 
public void whenAdjust_thenNextSunday(){
LocalDate localDate=localDate.of(2017,07,8);
LocalDate nextsunday =LocalDate.with(TemporalAdjusters.next(Dayofweek.SUNDAY));


string expected = "2017-07-09"
assertEquals(expeted,nextsunday.tostring());
}

*import java.time.LocalDate;
import java.time.temporal.TemporalAdjusters;
import java.time.DayOfWeek;

public class Java8Tester {
   public static void main(String args[]) {
      Java8Tester java8tester = new Java8Tester();
      java8tester.testAdjusters(); 	  
   }

   public void testAdjusters() {
      //Get the current date
      LocalDate date1 = LocalDate.now();
      System.out.println("Current date: " + date1);	  

      //get the next tuesday
      LocalDate nextTuesday = date1.with(TemporalAdjusters.next(DayOfWeek.TUESDAY));
      System.out.println("Next Tuesday on : " + nextTuesday);

      //get the second saturday of next month
      LocalDate firstInYear = LocalDate.of(date1.getYear(),date1.getMonth(), 1);

      LocalDate secondSaturday = firstInYear.with(
         TemporalAdjusters.nextOrSame(DayOfWeek.SATURDAY)).with(
         TemporalAdjusters.next(DayOfWeek.SATURDAY));
      System.out.println("Second saturday on : " + secondSaturday);	   
   }	
}

* writing custom temporal adjuster

*date formatting: two types Date format and simple date format
example for date format
import java.textDateFormat;
import java.util.Date;
public class DateFormatExample{
 public static void main(String[] args) {
  Date currentDate = new Date();
  system.out.println("current Date:"+currentDate);
  string dateToStr=DateFormat.getinstance().format(CurrentDate);
  system.ut.println("Date Format using getInstance():"+dateToStr);

   }
 }


import java.text.DateFormat;
import java.util.Date;
public class DateFormate Example{
 public static void main(Strinng[] args)thros Exception{

Date d= DateFormat.getDateInstance().prase("31 Mar,2015");
system.out.println("Date is:"+d);
  }
}

Java DateFormat Example: getTimeInstance(int style, Locale locale)

FileName: GetTimeInstanceExample.java

// important important statements  
import java.util.Date;  
import java.util.Locale;  
import java.text.DateFormat;  
  
  
  
public class GetTimeInstanceExample  
{  
// main method       
public static void main(String argvs[]) throws Exception   
{  
  
// locale is French here.  
Locale lcl = Locale.FRENCH;  
  
// creating an object of the class Date  
Date d = new Date();  
  
// getting the instance by invoking the getTimeInstance(int, Locale) method  
DateFormat dFormat = DateFormat.getTimeInstance(DateFormat.SHORT, lcl);  
  
String str = dFormat.format(d);  
System.out.println(str);  
}  
}  
Output:
13:12

*SimpleDateFormatExample3.java

import java.text.ParseException;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
public class SimpleDateFormatExample3 {  
public static void main(String[] args) {  
    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");  
    try {  
        Date date = formatter.parse("31/03/2015");  
        System.out.println("Date is: "+date);  
    } catch (ParseException e) {e.printStackTrace();}  
}  
}  



*handling time zone
java timezone class Example:get offset()
import java.util.*;
public class TimeZoneExample2
 public static void main(String args[]){
  TimeZone  zone=TimeZone.getTimeZone("Hyd/kolkata");
  system.out.println("The offset value of TimeZone:"+
zone.getOffset(Calendar.ZONE_OFFSET));
 }
}

* Example:getDisplayName()
import java.util.*;
public class TimeZoneExample4{
  public static void main(string args[]){
TimeZone Zone= TimeZone.getDefault();
 string name=Zone.getDisplayName();
system.out.println("Display name for default time zone:"+name);
}
}  




*Java TimeZone class Example: getDefault()
FileName: GetDefaultExample.java


// important import statement  
import java.util.*;  
  
public class GetDefaultExample  
{  
// main method  
public static void main(String[] argvs)  
{  
// invoking the getDefault() Method  
TimeZone zone = TimeZone.getDefault();     
System.out.println("The ID of the default TimeZone is: " + zone.getID());    
   
}  
}  
Output:
The ID of the default TimeZone is: GMT


*Java TimeZone class Example: setID()
FileName: SetIDExample.java

// important import statement  
import java.util.*;  
  
public class SetIDExample   
{  
     
// main method  
public static void main( String argvs[] )   
{  
  
// creating an object of the class TimeZone   
TimeZone tz = TimeZone.getDefault();  
  
// setting the time zone ID  
tz.setID("GMT + 07:01");  
  
// checking for the time zone ID  
System.out.println("The Time zone ID is: " + tz.getID());  
}      
}  
Output:
The Time zone ID is: GMT + 07:01











