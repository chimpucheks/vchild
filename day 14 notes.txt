			DAY 14:LAMBDA EXPRESSION METHOD REFERENCES STREAM


1.WHAT IS A LAMBDA EXPRESSION:
*.Argument-list:it can be empty
*.Arrow-token:it is used to link arguments-list and body of expression
*.Body:it cotain expression and statements
@Functionalinterface//it is optional
interface Drawable{
public void draw();
}
public class LambdaExpressionExample2{
public static void main(String[] args){
int width=10

//with lambda
Drawable d2=0->{
system.out.println("Drawing"+Width);
};
d2.draw();
}
}


no parameter:
interface sayable{
public string say();
}
public class LambdaExpressionExample3{
public static void main(String[] args){
sayable s=0->{
return "i have nothing to say.";
};
system.out.println(s.say());
}
}


single parameter:
interface sayable{
public string say(String name);
}
public class LambdaExpressionExample4{
public static void main(String[] args){


//Lambda expression with single parameter.
sayable s1=(name)->{
return "Hello ,"+name;
};
system.out.pritln(s1.say("sonoo"));
//you can omit function parentheses
sayable s2=name->{
return "Hello,"+name;
};
system.out.println(s2.say("sonoo"));
}
}


multiple paramters:
interface Addable{
int add(int a,int b);
}

public class LambdaExpressionEXample5{
public static void main(String[] args){

//multiple paramters in lambda expression

Addable ad1=(a,b)->(a+b);
system.out.println(ad1.add(10,20));

multiple parameters with data type inlambda expression
Addable ad2=(inta, int b)->(a+b);
system.out.println(add2.add(100,200));
}
}

Java Lambda Expression Example: with or without return keyword

interface Addable{  
    int add(int a,int b);  
}  
  
public class LambdaExpressionExample6 {  
    public static void main(String[] args) {  
          
        // Lambda expression without return keyword.  
        Addable ad1=(a,b)->(a+b);  
        System.out.println(ad1.add(10,20));  
          
        // Lambda expression with return keyword.    
        Addable ad2=(int a,int b)->{  
                            return (a+b);   
                            };  
        System.out.println(ad2.add(100,200));  
    }  
}  




Java Lambda Expression Example: Foreach Loop
import java.util.*;  
public class LambdaExpressionExample7{  
    public static void main(String[] args) {  
          
        List<String> list=new ArrayList<String>();  
        list.add("ankit");  
        list.add("mayank");  
        list.add("irfan");  
        list.add("jai");  
          
        list.forEach(  
            (n)->System.out.println(n)  
        );  
    }  
}  

Java Lambda Expression Example: Multiple Statements
@FunctionalInterface  
interface Sayable{  
    String say(String message);  
}  
  
public class LambdaExpressionExample8{  
    public static void main(String[] args) {  
      
        // You can pass multiple statements in lambda expression  
        Sayable person = (message)-> {  
            String str1 = "I would like to say, ";  
            String str2 = str1 + message;   
            return str2;  
        };  
            System.out.println(person.say("time is precious."));  
    }  
}  




Java Lambda Expression Example: Creating Thread
public class LambdaExpressionExample9{  
    public static void main(String[] args) {  
      
        //Thread Example without lambda  
        Runnable r1=new Runnable(){  
            public void run(){  
                System.out.println("Thread1 is running...");  
            }  
        };  
        Thread t1=new Thread(r1);  
        t1.start();  
        //Thread Example with lambda  
        Runnable r2=()->{  
                System.out.println("Thread2 is running...");  
        };  
        Thread t2=new Thread(r2);  
        t2.start();  
    }  
}  




Java Lambda Expression Example: Comparator

import java.util.ArrayList;  
import java.util.Collections;  
import java.util.List;  
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        super();  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}

  
public class LambdaExpressionExample10{  
    public static void main(String[] args) {  
        List<Product> list=new ArrayList<Product>();  
          
        //Adding Products  
        list.add(new Product(1,"HP Laptop",25000f));  
        list.add(new Product(3,"Keyboard",300f));  
        list.add(new Product(2,"Dell Mouse",150f));  
          
        System.out.println("Sorting on the basis of name...");  
  
        // implementing lambda expression  
        Collections.sort(list,(p1,p2)->{  
        return p1.name.compareTo(p2.name);  
        });  
        for(Product p:list){  
            System.out.println(p.id+" "+p.name+" "+p.price);  
        }  
  
    }  
}  



Java Lambda Expression Example: Filter Collection Data
import java.util.ArrayList;  
import java.util.List;  
import java.util.stream.Stream;   
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        super();  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}  



public class LambdaExpressionExample11{  
    public static void main(String[] args) {  
        List<Product> list=new ArrayList<Product>();  
        list.add(new Product(1,"Samsung A5",17000f));  
        list.add(new Product(3,"Iphone 6S",65000f));  
        list.add(new Product(2,"Sony Xperia",25000f));  
        list.add(new Product(4,"Nokia Lumia",15000f));  
        list.add(new Product(5,"Redmi4 ",26000f));  
        list.add(new Product(6,"Lenevo Vibe",19000f));  
          
        // using lambda to filter data  
        Stream<Product> filtered_data = list.stream().filter(p -> p.price > 20000);  
          
        // using lambda to iterate through collection  
        filtered_data.forEach(  
                product -> System.out.println(product.name+": "+product.price)  
        );  
    }  
}  




Java Lambda Expression Example: Event Listener
import javax.swing.JButton;  
import javax.swing.JFrame;  
import javax.swing.JTextField;  
public class LambdaEventListenerExample {  
    public static void main(String[] args) {  
        JTextField tf=new JTextField();  
        tf.setBounds(50, 50,150,20);  
        JButton b=new JButton("click");  
        b.setBounds(80,100,70,30);  
          
        // lambda expression implementing here.  
        b.addActionListener(e-> {tf.setText("hello swing");});  
          
        JFrame f=new JFrame();  
        f.add(tf);f.add(b);  
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  
        f.setLayout(null);  
        f.setSize(300, 200);  
        f.setVisible(true);  
  
    }  
  
}


2.LAMBDA EXPRESSION USING CORE FUNCTIONAL INTERFACE LLIKE PRODUCER, CONSUMER,FUNCTION AND PRERDICATE
Example 2
      
@FunctionalInterface  
interface sayable{  
    void say(String msg);   // abstract method  
    // It can contain any number of Object class methods.  
    int hashCode();  
    String toString();  
    boolean equals(Object obj);  
}  
public class FunctionalInterfaceExample2 implements sayable{  
    public void say(String msg){  
        System.out.println(msg);  
    }  
    public static void main(String[] args) {  
        FunctionalInterfaceExample2 fie = new FunctionalInterfaceExample2();  
        fie.say("Hello there");  
    }  
}  

Output:

Hello there
Invalid Functional Interface
A functional interface can extends another interface only when it does not have any abstract method.

interface sayable{  
    void say(String msg);   // abstract method  
}  
@FunctionalInterface  
interface Doable extends sayable{  
    // Invalid '@FunctionalInterface' annotation; Doable is not a functional interface  
    void doIt();  
}  
Output:

compile-time error

Example 3
In the following example, a functional interface is extending to a non-functional interface.

interface Doable{  
    default void doIt(){  
        System.out.println("Do it now");  
    }  
}  
@FunctionalInterface  
interface Sayable extends Doable{  
    void say(String msg);   // abstract method  
}  
public class FunctionalInterfaceExample3 implements Sayable{  
    public void say(String msg){  
        System.out.println(msg);  
    }  
    public static void main(String[] args) {  
        FunctionalInterfaceExample3 fie = new FunctionalInterfaceExample3();  
        fie.say("Hello there");  
        fie.doIt();  
    }  
}  

Output:

Hello there
Do it now

*CONSUMER:
Java Consumer Interface Example 1
// Importing Consumer interface  
import java.util.function.Consumer;  
public class ConsumerInterfaceExample {  
    static void printMessage(String name){  
        System.out.println("Hello "+name);  
    }  
    static void printValue(int val){  
        System.out.println(val);  
    }  
    public static void main(String[] args) {  
        // Referring method to String type Consumer interface   
        Consumer<String> consumer1 = ConsumerInterfaceExample::printMessage;  
        consumer1.accept("John");   // Calling Consumer method  
        // Referring method to Integer type Consumer interface  
        Consumer<Integer> consumer2 = ConsumerInterfaceExample::printValue;  
        consumer2.accept(12);   // Calling Consumer method  
    }  
}  
Output:

Hello John
12


Java Consumer Interface Example2
import java.util.ArrayList;  
import java.util.List;  
import java.util.function.Consumer;  
public class ConsumerInterfaceExample {  
    static void addList(List<Integer> list){  
        // Return sum of list values  
        int result = list.stream()  
                   .mapToInt(Integer::intValue)  
                   .sum();  
        System.out.println("Sum of list values: "+result);  
    }  
    public static void main(String[] args) {  
        // Creating a list and adding values  
                List<Integer> list = new ArrayList<Integer>();  
                list.add(10);  
                list.add(20);  
                list.add(30);  
                list.add(40);  
        // Referring method to String type Consumer interface   
        Consumer<List<Integer>> consumer = ConsumerInterfaceExample::addList;  
        consumer.accept(list);  // Calling Consumer method  
          
    }  
}  



*FUNCTION
Java Function Interface Example 1
// importing Function interface  
import java.util.function.Function;  
public class FunctionInterfaceExample {  
    static String show(String message){  
        return "Hello "+message;  
    }  
    public static void main(String[] args) {  
        // Function interface referring to a method  
        Function<String, String> fun = FunctionInterfaceExample::show;  
        // Calling Function interface method  
        System.out.println(fun.apply("Peter"));  
    }  
}  
Output:

Hello Peter  



Java Function Interface Example 2
// importing Function interface  
import java.util.function.Function;  
import java.util.List;  
import java.util.ArrayList;  
public class FunctionInterfaceExample {  
    static Integer addList(List<Integer> list){  
        return list.stream()  
                   .mapToInt(Integer::intValue)  
                   .sum();  
    }  
    public static void main(String[] args) {  
        // Creating a list and adding values  
        List<Integer> list = new ArrayList<Integer>();  
        list.add(10);  
        list.add(20);  
        list.add(30);  
        list.add(40);  
        // Referring addList() method  
        Function<List<Integer>, Integer> fun = FunctionInterfaceExample::addList;  
        // Calling Function interface method  
        int result = fun.apply(list);  
        System.out.println("Sum of list values: "+result);  
    }  
}  
Output:
Sum of list values: 100

*PREDICATE:
Java Predicate Interface Example 1
import java.util.function.Predicate;  
public class PredicateInterfaceExample {  
    public static void main(String[] args) {  
        Predicate<Integer> pr = a -> (a > 18); // Creating predicate  
        System.out.println(pr.test(10));    // Calling Predicate method    
    }  
}  
Output:
false

*Java Predicate Interface Example 2
import java.util.function.Predicate;  
public class PredicateInterfaceExample {  
    static Boolean checkAge(int age){  
        if(age>17)  
            return true;  
        else return false;  
    }  
    public static void main(String[] args){  
        // Using Predicate interface  
        Predicate<Integer> predicate =  PredicateInterfaceExample::checkAge;  
        // Calling Predicate method  
        boolean result = predicate.test(25);  
        System.out.println(result);  
    }  
}  
Output:
true

3.PRIMITIVE SPECIALISATION LIKE INT PREDICAT,DOUBLE FUNCTION ECT
4.DEFAULT &STATIC METHODS IN CORE FUNCTIONAL INTERFACE
static method example
interface sayable{
//default method(){
system.out.println("Hello ,this is default method");
}
//abstract method
void saymmore(String msg);
//static method
staic void  sayLouder(String msg){
system.out.println(msg);
}
}
public class defaultMethods implements sayable{
public void saymore(String msg){    //implementing abstract method
system.out.println(msg);
}

public static void main(String[] args){
DefaultMethods dm=new DefaultMethod();
dm.say();       //calling Default method
dm.sayMore("work is worship")		//calling abstract method
sayable.sayLouder("Hellooooo....") 	//calling static method

out put : Hello there
work is worship
helloooo


5.TYPES OF METHOD REFERNCES
3types of references
static method example:
*interface sayable{
	void say();

}
public class MethpdReference{
	public static void saySomething(){
          system.out.println("Hello,thid is static method");
}
public static void main(String[] args);
//Referring static method

sayable sayable=MethodReference::saySomething;
//calling interface method
sayable.say();
}

*public class MethodReference2{
   public static  void ThreadStatus(){
     system.out.println("Thread is running...");
}
pubic static void main(String[] args){
Thread t2=new Thread(MethodReference2::ThreadStatus);
t2.start();

}
}

*import java.util.function.Bifunction;
class Arithmetic{
public static int add(int a, int b){
return a+b;
}
}
public class MethodReference3{
public static void main(Strting[] args){
BiFunction <integer,integer>adder=Arthmetic::add;
int result = adder.apply(10,20);
system.oout.println(result);
}
}

out put 
30
	
2.instance method:

*interface sayable{
   void say();
}
public class InstanceMethodsReference{
  public void saysomething(){
    system.out.println("Hello,this non-static method.");
}

public  static void main(String[] args){
instanceMethodReference methodReference=ew instanceMethodReference();//creating object
//Referring non-static method using reference
sayable sayable = MethodReference::saySomething;
//caling interface Method

sayable.say();
//Referring non-static method using anonymous objects
sayable sayable2= new instanceMethodReference()::saySomething;//you can use anonymous
//calling interface method
sayable2.say();
}
}

outpput
Hello,this is non-static method


*public class InstanceMethodReference2{
   publlic void printlnMsg(){
     system.out.println("Hello ,this is Instance Method");

}


public static void main(String[] args){
Thread t2=new Thread(new instanceMethodReference2()::printMsg);
t2.start();
}
}


* impport java.util.function.BiFunction;
class Arthmetic{
public int add(inta,int b){
return a+b;
}
}
public classInstanceMethodReferencce3{
public Static void main(String[] args){
BiFunction<integer,Integer,integer>adder=new Arithmetic()::add;
int result = adder.apply(10,20);
system.out.println(result);
}
}

output:30



3.constructor
*interface Messageable{
}
class message{
message(string[] msg){
system.out.println(msg);
}
}
public class constructorReference{
  public static void main(String[] args){
    messageable hello=message::new;
     hellpo.getMessage("Hello");
}
}

output: Hello




*USING METHOD RREFERNCE

*WHAT ARE STREAMS
impport java.util.*;
import java.util.stream collectors;
class product{
int id;
String name;
float price;
public product(int id,String name,float price){
this.id= id;
this.name=name;
this.price=price;
}
}
public class javaStream Example{
   public static void main(String[] args){
     list <product> productList= new ArrayList <product>();
	//Adding products
  productsList.add(new product(1,"HP Laptop",25000f));
  productsList.add(new product(2,"Dell Laptop",30000f));
  productsList.add(new product(3,"Lenevo Laptop",28000f));
  productsList.add(new product(4,"Sony Laptop",280000f));
  productsList.add(new product(5,"Apple Laptop",900000f));
  List<float>productpriceList2=productsList.stream()
	.filter(p->p.price>30000)//fitering data
	.map(p->p.price)//fetching price
	.collect(Collectors.toList());//collecting as list
   system.out.println(productpriceList2);
}
}


java stream iterating
import java.util.stream.*;
public class JavaStreamExample{
   public static void main(String[] args){
     stream.iterate(1,elements->element+1)
      .filter(elements->element%5==0)
      .limit(5)
      . forEach(system.out.println);

}
}



*COLLECTIONOS DIFFER STREAMS
*STREAM API
*STREAM OPERATION